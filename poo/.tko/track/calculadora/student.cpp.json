{
    "patches": [
        {
            "label": "2024-12-20_08-06-09",
            "content": "/*\n\nFicou faltando apenas um teste, creio q esteja com um problema de recurso, pois ao inves\nde processar $div 7 2 ... esta sendo processado $div 10 2 \n\nex: \n| display = 2.00, battery = 1                                            \u2502\n\u2502 $div 10 2\n| $div 7 2  \n\n*/\n\n\n\n#pragma once\n#include \"fn.hpp\"\n\nusing namespace std;\n\n\nstruct Calculator{\n    int Battery, BatteryMax;\n    float display;\n    \n\n    Calculator(int Battery, int BatteryMax, float display = 0.0){\n        this -> Battery = Battery;\n        this -> BatteryMax = BatteryMax;\n        this -> display = display;\n    }\n    // Parte 2\n    // Crie o m\u00e9todo charge. Tente adicionar carga \u00e0 bateria.\n    // Verifique se ele adiciona al\u00e9m do limite.\n    int charge (int value){\n        Battery += value; // charge 1\n        if(Battery > BatteryMax){\n            Battery = BatteryMax;\n        }\n        return Battery; \n\n    }\n    // Crie o m\u00e9todo para somar.\n    //  Verifique se a soma \u00e9 guardada no display ao inv\u00e9s de impressa diretamente.\n    //   Imprima a mensagem de erro adequada se n\u00e3o houver bateria.\n    //  Lembre de gastar bateria.\n    int sum (int a, int b){\n       if ( Battery <= 0){\n        cout << \"fail: bateria insuficiente\" << endl;\n        return 0;\n       }\n      \n       display =  (a) + (b);\n       Battery--;\n       return display;\n    }\n    // Crie o m\u00e9todo para dividir.\n    // Verifique se existe bateria, se existir gaste, se n\u00e3o, emita o erro.\n    // Verifique se a divis\u00e3o \u00e9 poss\u00edvel, se n\u00e3o for, emita o erro e retorne.\n    // Guarde o resultado no display.\n    int division (int num, int den){\n        Battery--;\n        if (Battery == 0  ){\n           cout << \"fail: bateria insuficiente\" << endl;\n            return 0;\n        } else if (Battery < 0){\n            Battery = 0;;\n        }\n        if (den == 0){\n         cout << \"fail: divisao por zero\" << endl;\n         return 0;\n        }\n        \n        display = (num) / den ;\n        return display;\n\n    }\n    \n\n\n    string toString()\n    {\n        return fn::format(\"display = {%.2f}, battery = {}\", this->display, this->Battery); \n    }\n\n\n};\nclass Student {\n     Calculator c;\n    public: \n    Student(int Battery, int BatteryMax, float display=0.0): c(Battery,BatteryMax,display=0.0) {} // peguei no chat\n  /*  {\n        c = Calculator(Battery,BatteryMax,display=0.0);\n    }\n    */\n    void show() {\n         cout << c.toString() << endl;\n    }\n    void init(int batteryMax) {\n        (void) batteryMax;\n         c = Calculator(0, batteryMax, 0.0);\n    }\n    void charge(int value) {\n        (void) value;\n        \n         c.charge(value);\n    }\n    void sum(int a, int b) {\n        (void) a;\n        (void) b;\n        c.sum(a, b);\n    }\n    void div(int num, int den) {\n        (void) num;\n        (void) den;\n        c.division(num, den);\n    }\n};\n"
        }
    ]
}