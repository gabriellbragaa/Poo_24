{
    "patches": [
        {
            "label": "2024-11-13_14-20-46",
            "content": "@@ -15,725 +15,107 @@\n pp%22%0A\n-%0Ausing namespace std;%0A%0Astruct Car%0A%7B%0A%0A    int pass, passMax, gas, gasMax;%0A    int km;%0A%0A    Car(int pass = 0, int passMax = 2, int gas = 0, int gasMax = 100, int km = 0)%0A    %7B%0A        this-%3Epass = pass;%0A        this-%3EpassMax = passMax;%0A        this-%3Egas = gas;%0A        this-%3EgasMax = gasMax;%0A        this-%3Ekm = km;%0A    %7D%0A%0A    void enter()%0A   \n+struct Student %7B%0A    // Car car;%0A    Student()\n  %7B\n+%7D\n %0A%0A    \n- \n-   if (pass == passMax)%0A        %7B%0A            cout %3C%3C %22fail:%22 %3C%3C %22 limite de pessoas atingido%22 %3C%3C endl;%0A        %7D%0A        else if (pass %3C passMax)%0A        %7B%0A            pass++;%0A        %7D%0A    %7D%0A%0A    // Parte 2: desembarcar%0A    // Crie o m%C3%A9todo %60leave%60 que decrementa %60pass%60.%0A    // Crie um condicional para impedir que %60pass%60 seja menor que 0.%0A    // Teste seu c%C3%B3digo.%0A\n+void enter() %7B%0A        // car.enter();%0A    %7D\n %0A   \n@@ -119,36 +119,32 @@\n     void leave()\n-%0A   \n  %7B%0A        if (p\n@@ -141,336 +141,30 @@\n     \n- \n-if (pass %3E 0)%0A        %7B%0A            pass--;%0A        %7D%0A        else%0A            cout %3C%3C %22fail: nao ha ninguem no carro%22 %3C%3C endl;%0A    %7D%0A%0A    // Parte 3: abastecer%0A    // Crie o m%C3%A9todo %60fuel%60 que incrementa %60gas%60 com o valor passado.%0A    // Crie um condicional para impedir que %60gas%60 ultrapasse %60gasMax%60.%0A    // Teste seu c%C3%B3digo.%0A\n+ // car.leave();%0A    %7D\n %0A   \n@@ -182,16 +182,10 @@\n int \n-inc)%0A   \n+q)\n  %7B%0A \n@@ -195,1342 +195,113 @@\n     \n-gas += inc;%0A        if (gas %3E gasMax)%0A        %7B%0A            gas = gasMax;%0A        %7D%0A        else%0A        %7B%0A            return;%0A        %7D%0A    %7D%0A%0A    // Parte 4: dirigir%0A    // Crie o m%C3%A9todo %60drive%60 que incrementa %60km%60 e decrementa %60gas%60 com o valor passado.%0A    // Crie testes para impedir que o carro dirija sem passageiros ou sem combust%C3%ADvel.%0A%0A    void drive(int distancia)%0A    %7B%0A%0A        if (pass == 0)%0A        %7B%0A            cout %3C%3C %22fail: nao ha ninguem no carro%22 %3C%3C endl;%0A        %7D%0A        else if (gas == 0)%0A        %7B%0A            cout %3C%3C %22fail: tanque vazio%22 %3C%3C endl;%0A        %7D%0A        else if (distancia %3E gas)%0A        %7B%0A%0A            km += gas;%0A            cout %3C%3C %22fail: tanque vazio apos andar %22 %3C%3C gas %3C%3C %22 km%22 %3C%3C endl;%0A            gas = 0;%0A        %7D%0A        else%0A        %7B%0A            km += distancia;%0A            gas -= distancia;%0A        %7D%0A    %7D%0A    string toString()%0A    %7B%0A        return %22pass: %22 + to_string(pass) + %22, gas: %22 + to_string(gas) + %22, km: %22 + to_string(km);%0A    %7D%0A%7D;%0A%0Astruct Student%0A%7B%0A%0A    Car car;%0A    Student(int pass = 0, int gas = 0, int km = 0)%0A    %7B%0A        car = Car(pass, 2, gas, 100, km);%0A    %7D%0A%0A    void enter()%0A    %7B%0A        car.enter();%0A    %7D%0A    void leave()%0A    %7B%0A        car.leave(\n+// car.fuel(q);%0A        (void) q;%0A    %7D%0A    void drive(int q) %7B%0A        // car.drive(q\n );%0A    \n-%7D%0A\n     \n-void fuel(int x)%0A    %7B%0A        car.fuel(x);%0A    %7D%0A    void drive(int q)%0A    %7B%0A        car.drive(q)\n+(void) q\n ;%0A  \n@@ -319,20 +319,16 @@\n d show()\n-%0A   \n  %7B%0A     \n@@ -330,16 +330,24 @@\n         \n+// std::\n cout %3C%3C \n@@ -354,22 +354,22 @@\n car.\n-toString\n+str\n () %3C%3C \n+std::\n endl\n@@ -392,17 +392,17 @@\n ct Debug\n-%0A\n+ \n %7B%0A    //\n@@ -639,20 +639,16 @@\n id run()\n-%0A   \n  %7B%0A     \n@@ -681,28 +681,29 @@\n vado%22 %3C%3C std::endl;%0A    %7D%0A%7D;\n+%0A\n"
        },
        {
            "label": "2024-12-09_15-02-33",
            "content": "#include \"fn.hpp\"\n\nusing namespace std;\n\nstruct Car\n{\n\n    int pass, passMax, gas, gasMax;\n    int km;\n\n    Car(int pass = 0, int passMax = 2, int gas = 0, int gasMax = 100, int km = 0)\n    {\n        this->pass = pass;\n        this->passMax = passMax;\n        this->gas = gas;\n        this->gasMax = gasMax;\n        this->km = km;\n    }\n\n    void enter()\n    {\n\n        if (pass == passMax)\n        {\n            cout << \"fail:\" << \" limite de pessoas atingido\" << endl;\n        }\n        else if (pass < passMax)\n        {\n            pass++;\n        }\n    }\n\n    // Parte 2: desembarcar\n    // Crie o m\u00e9todo `leave` que decrementa `pass`.\n    // Crie um condicional para impedir que `pass` seja menor que 0.\n    // Teste seu c\u00f3digo.\n\n    void leave()\n    {\n        if (pass > 0)\n        {\n            pass--;\n        }\n        else\n            cout << \"fail: nao ha ninguem no carro\" << endl;\n    }\n\n    // Parte 3: abastecer\n    // Crie o m\u00e9todo `fuel` que incrementa `gas` com o valor passado.\n    // Crie um condicional para impedir que `gas` ultrapasse `gasMax`.\n    // Teste seu c\u00f3digo.\n\n    void fuel(int inc)\n    {\n        gas += inc;\n        if (gas > gasMax)\n        {\n            gas = gasMax;\n        }\n        else\n        {\n            return;\n        }\n    }\n\n    // Parte 4: dirigir\n    // Crie o m\u00e9todo `drive` que incrementa `km` e decrementa `gas` com o valor passado.\n    // Crie testes para impedir que o carro dirija sem passageiros ou sem combust\u00edvel.\n\n    void drive(int distancia)\n    {\n\n        if (pass == 0)\n        {\n            cout << \"fail: nao ha ninguem no carro\" << endl;\n        }\n        else if (gas == 0)\n        {\n            cout << \"fail: tanque vazio\" << endl;\n        }\n        else if (distancia > gas)\n        {\n\n            km += gas;\n            cout << \"fail: tanque vazio apos andar \" << gas << \" km\" << endl;\n            gas = 0;\n        }\n        else\n        {\n            km += distancia;\n            gas -= distancia;\n        }\n    }\n    string toString()\n    {\n        return \"pass: \" + to_string(pass) + \", gas: \" + to_string(gas) + \", km: \" + to_string(km);\n    }\n};\n\nstruct Student\n{\n\n    Car car;\n    Student(int pass = 0, int gas = 0, int km = 0)\n    {\n        car = Car(pass, 2, gas, 100, km);\n    }\n\n    void enter()\n    {\n        car.enter();\n    }\n    void leave()\n    {\n        car.leave();\n    }\n    void fuel(int x)\n    {\n        car.fuel(x);\n    }\n    void drive(int q)\n    {\n        car.drive(q);\n    }\n    void show()\n    {\n        cout << car.toString() << endl;\n    }\n};\n\nstruct Debug\n{\n    // Se a vari\u00e1vel debug for true, os testes n\u00e3o ser\u00e3o executados\n    // Apenas o conte\u00fado do m\u00e9todo run() ser\u00e1 executado\n    // Voc\u00ea pode usar isso para testar seu c\u00f3digo manualmente\n    static const bool debug = false;\n    static void run()\n    {\n        std::cout << \"Debug ativado\" << std::endl;\n    }\n};"
        }
    ]
}