{
    "patches": [
        {
            "label": "2024-12-20_14-41-40",
            "content": "@@ -2631,16 +2631,21 @@\n tDriver(\n+std::\n string n\n@@ -2840,16 +2840,21 @@\n setPass(\n+std::\n string n\n"
        },
        {
            "label": "2024-12-20_14-45-33",
            "content": "// uma parte\n\n#include <iostream>\n#include \"fn.hpp\"\n\nusing namespace std;\n\nclass Pessoa{\nprivate:\n    string nome=\"\";\n    int dinheiro=0;\npublic:\n    Pessoa(string nome=\"\", int dinheiro=0 ) : nome(nome) , dinheiro(dinheiro) {}\n\n    int getDinheiro(){\n        return dinheiro;\n    }\n\n    string getName(){\n        return nome;\n    }\n\n    void descontar(int x){\n    if(dinheiro < x){\n        dinheiro = 0;\n        } else \n        dinheiro -= x;\n        }\n    \n    void addDinheiro(int x){\n        dinheiro += x;\n        \n    }\n    string str() {\n        return fn::format(\"{}:{}\", nome, dinheiro);\n    }\n\n};\nclass Moto{\nprivate:\n    int custo;\n    Pessoa* motorista = nullptr;\n    Pessoa* passageiro = nullptr;\npublic: \n    Moto() : custo(0), motorista(nullptr), passageiro(nullptr){}\n\n    int getCusto(){\n        return custo;\n    }\n    string dirigir(int distance){\n        \n        if(motorista == nullptr){\n            return \"ja possui motorista\";\n        } \n        if(passageiro == nullptr){\n            return \"motorista esta na moto\";\n        }\n         custo += distance;    // Cada km percorrido aumenta o custo da corrida em 1 real.\n         return \"moto esta em movimento\";\n    }\n        \n\n    // Motorista e Passageiro \n    // s\u00e3o pessoas que tem nome e dinheiro.\n    string setPass(Pessoa* person){\n        if(motorista == nullptr){\n            return \"nao ha motorista\";\n        }\n        passageiro = person;\n        return \"passageiro subiu\";\n\n    }\n    \n    \n    string setDriver(Pessoa* person){\n      if(this->motorista != nullptr){\n                return \"Falha: j\u00e1 existe motorista\\n\";\n            }\n            motorista = person;\n            return \"Motorista est\u00e1 na moto\\n\";\n        }\n    \n    string Desembacar() {\n        if(passageiro == nullptr){\n                return \"Falha, n\u00e3o h\u00e1 passageiro\\n\";\n            }\n            if (passageiro->getDinheiro() < custo) {\n                cout << \"fail: Passenger does not have enough money\\n\";\n            }\n            motorista->addDinheiro(custo);\n            passageiro->descontar(custo);\n            string mensagem = fn::format(\"{}:{} leave\\n\", passageiro->getName(), passageiro->getDinheiro());\n            custo = 0;\n            passageiro = nullptr;\n            return mensagem;\n        }\n\n\n        string str() const {\n            string impMotorista = motorista ? motorista->str() : \"None\";\n            string impPassageiroStr = passageiro ? passageiro->str() : \"None\";\n            return fn::format(\"Cost: {}, Driver: {}, Passenger: {}\", custo, impMotorista, impPassageiroStr);\n        }\n\n};\n\nclass Adapter {\n    Moto moto;\npublic:\n\n    void setDriver(string name, int money) {\n        (void) name;\n        (void) money;\n        // criar motorista\n        Pessoa* person = new Pessoa(name, money);\n        moto.setDriver(person);\n    }   \n    void setPass(string name, int money) {\n        (void) name;    \n        (void) money;\n        // criar o passageiro\n        Pessoa* person = new Pessoa(name, money);\n        moto.setPass(person);\n\n    }\n    void drive(int distance) {\n        (void) distance;\n        moto.dirigir(distance);\n    }\n    void leavePass() {\n        cout << moto.Desembacar();\n    }\n    void show() {\n        cout << moto.str() << endl;\n    }\n};\n\nint main() {\n    Adapter adp;\n    while (true) {\n        fn::write(\"$\", \"\");\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n        fn::write(line);\n\n        if      (args[0] == \"end\")       { break;                                  }\n        else if (args[0] == \"setDriver\") { adp.setDriver(args[1], +args[2]);       }\n        else if (args[0] == \"setPass\")   { adp.setPass(args[1], +args[2]);         }\n        else if (args[0] == \"drive\")     { adp.drive(+args[1]);                    }\n        else if (args[0] == \"leavePass\") { adp.leavePass();                        }\n        else if (args[0] == \"show\")      { adp.show();                             }\n        else                             { fn::write(\"fail: command not found\\n\"); }\n    }\n}"
        }
    ]
}