{
    "patches": [
        {
            "label": "2024-12-20_14-38-35",
            "content": "#include \"fn.hpp\"\n\nusing namespace std;\n\nclass Relogio\n{\nprivate:\n    int hour=0;\n    int minute=0;\n    int second=0;\npublic:\n     Relogio(int h, int m, int s) {\n\n      setHour(h); \n      setMinute(m); \n      setSecond(s);\n      }\n    \n// como os parametris sao privados, devo criar os metodos gets\n    int getHour()  {\n     \n    return hour; \n    }\n    int getMinute() {\n    return minute; \n    }\n    int getSecond() {\n    return second; \n    }\n\nvoid setHour(int h){\n    if ( h < 0 || h > 23){\n        cout << \"fail: hora invalida\" << endl; \n        return;\n    }\n     this->hour = h;\n}\nvoid setMinute(int m){\n    if(m < 0 || m > 59){\n        cout << \"fail: minuto invalido\" << endl; \n        return;\n    }\n    this-> minute = m;\n}\nvoid setSecond(int s){\n    if(s < 0 || s > 59){\n        cout << \"fail: segundo invalido\" << endl; \n        return;\n    }\n     this-> second = s;\n}\n// Parte 5: nextSecond\n    // - Crie um m\u00e9todo nextSecond que incrementa o segundo em 1.\n    // - Crie um objeto rel\u00f3gio, atribua valores para hora, minuto e segundo e imprima a hora.\n    // - Teste o m\u00e9todo nextSecond criando horas com os seguintes valores e testando:\n    // - 10:02:30\n    // - 15:50:59\n    // - 21:59:59\n    // - 23:59:59\n     void nextSecond() {    // ajuda do chat\n        second++;\n        if (second > 59) {\n            second = 0;\n            minute++;\n            if (minute > 59) {\n                minute = 0;\n                hour++;\n                if (hour > 23) {\n                    hour = 0; \n                }\n            }\n        }\n    }\n    string toString() { // ajuda do chat\n    string h = (hour < 10 ? \"0\" : \"\") + std::to_string(hour);\n    string m = (minute < 10 ? \"0\" : \"\") + std::to_string(minute);\n    string s = (second < 10 ? \"0\" : \"\") + std::to_string(second);\n    return h + \":\" + m + \":\" + s;\n}\n};\n\nclass Adapter {\nprivate:\n    Relogio time;\n\npublic:\n    // criar o Construtor\n    Adapter(int hour = 0, int minute = 0, int second = 0) : time(hour, minute, second) {}\n\n    // inicializa\u00e7\u00e3o\n    void init(int hour = 0, int minute = 0, int second = 0) {\n        \n        this->time = Relogio(hour, minute, second);\n    }\n    void setHour(int hour) {\n        (void) hour;\n        this-> time.setHour(hour);\n    }\n\n    void setMinute(int minute) {\n        time.setMinute(minute);\n    }\n\n    void setSecond(int second) {\n        time.setSecond(second);\n    }\n\n    // M\u00e9todo para incrementar o segundo\n    void nextSecond() {\n        time.nextSecond();\n    }\n\n    \n    void show() {\n        fn::write(time.toString());\n    }\n};\n\nint main() {\n    Adapter stu;\n\n    while (true) {\n        fn::write(\"$\", \"\");\n\n        auto line = fn::input();\n        auto args = fn::split(line, ' ');\n\n        fn::write(line);\n\n        if (args[0] == \"end\") {\n            break;\n        }\n        else if (args[0] == \"set\") {\n            stu.setHour(+args[1]);\n            stu.setMinute(+args[2]);\n            stu.setSecond(+args[3]);\n        } \n        else if (args[0] == \"init\") {\n            stu.init(+args[1], +args[2], +args[3]);\n        }\n        else if (args[0] == \"show\") {\n            stu.show();\n        }\n        else if (args[0] == \"next\") {\n            stu.nextSecond();\n        }\n        else {\n            fn::write(\"fail: comando invalido\");\n        }\n    }\n    return 0;\n}\n\n"
        }
    ]
}