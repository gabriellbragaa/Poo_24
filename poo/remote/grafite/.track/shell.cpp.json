{
    "patches": [
        {
            "label": "2024-11-28_09-52-46",
            "content": "@@ -35,2910 +35,53 @@\n am%3E%0A\n-%0Ausing namespace std;%0A%0Aclass Grafite%7B%0A// atributo size%0Aprivate:%0A    int size; // tamanho grafite%0A    double thickness; // espessura%0A    string hardness; // dureza%0Apublic: %0A// cria o construtor %0A// inicializacao%0A%0A    Grafite(int size=0,double thickness= 0.3, string hardness= %22HB%22) : size(size), thickness(thickness), hardness(hardness)%7B%7D%0A%0Aint usagePerSheet()%7B%0A        if(hardness == %22HB%22)%7B return 1; %0A        %7D else if(hardness == %222B%22)%7B return 2;%0A        %7D else if(hardness == %224B%22)%7B return 3;%0A        %7D else if(hardness == %226B%22)%7B return 4;%0A        %7D%0A%0A    %7D%0A// chama o get pq size, thickness e hardness sao privado%0A// chama o set %0A%0Aint getSize()%7B%0A    return size;%0A%7D%0Avoid setSize(int s)%7B%0A     this-%3E size = size;%0A%7D%0Adouble getThickness()%7B%0A    return thickness;%0A%7D%0Astring getHardness()%7B%0A    return hardness;%0A%7D%0Avoid setThickness(double thickness) %7B%0A        this-%3Ethickness = thickness;%0A    %7D%0Avoid setHardness(string hardness) %7B%0A        this-%3Ehardness = hardness;%0A    %7D%0Astring toString() %7B%0A        return %22Grafite %5BDureza: %22 + hardness + %22, Tamanho: %22 + to_string(size) + %22mm%5D%22;%0A    %7D%0A%7D;%0A%0A%0Aclass Lapiseira%7B%0Aprivate:%0A    Grafite* tip;%0A    double thickness;%0Apublic:%0A%0A    // Construtor%0A    Lapiseira() : tip(nullptr)%7B%7D%0A%0A%0A    bool hasGrafite()%7B%0A        return tip != nullptr; // verificar se ha grafite%0A    %7D%0A    %0A    // implementar o metodo insert%0A    bool insert(Grafite* novoGrafite)%7B%0A        if(tip != nullptr)%7B%0A            cout %3C%3C %22fail: ja existe grafite%22 %3C%3C endl;%0A            return false;%0A        %7D%0A        return true;%0A    %7D%0A    Grafite* remove (int valor )%7B%0A        if (tip == nullptr)%7B%0A            cout %3C%3C %22fail: nao existe grafite%22 %3C%3C endl;%0A            return nullptr;%0A        %7D%0A        Grafite* remove = tip; %0A        tip = nullptr;%0A        return remove;%0A        %7D%0A   %0A    void writePage() %7B%0A        if (!hasGrafite()) %7B%0A            cout %3C%3C %22fail: nao ha grafite na lapiseira.%22 %3C%3C endl;%0A            return;%0A        %7D%0A%0A        int consumo = tip-%3EusagePerSheet();%0A        if (tip-%3EgetSize() %3C consumo) %7B%0A            cout %3C%3C %22fail: grafite insuficiente para completar a folha.%22 %3C%3C endl;%0A            tip-%3EsetSize(0); // Consome todo o grafite restante%0A        %7D else %7B%0A            tip-%3EsetSize(tip-%3EgetSize() - consumo);%0A            cout %3C%3C %22Folha completa! Grafite restante: %22 %3C%3C tip-%3EgetSize() %3C%3C %22mm.%22 %3C%3C endl;%0A        %7D%0A    %7D%0A%0A    // Mostra o estado atual da lapiseira%0A    string toString() const %7B%0A        if (hasGrafite()) %7B%0A            return %22Lapiseira com %22 + tip-%3EtoString();%0A        %7D else %7B%0A            return %22Lapiseira sem grafite.%22;%0A        %7D%0A    %7D%0A%7D;%0A   %0A    %0A%0A    // - Parte 2: Remover Grafite%0A    // Implemente o m%C3%A9todo %60remove%60 que retira o grafite da lapiseira, se houver.%0A    // Verifique se o grafite foi removido corretamente.%0A   // Verifique se o m%C3%A9todo %60remove%60 retorna o grafite removido ou %60null%60 se n%C3%A3o havia grafite.%0A    %0A%0A%0Aclass Adapter %7B%0Aprivate:%0A    Lapiseira lapiseira\n+class Adapter %7B%0Aprivate:%0A    // Pencil pencil\n ;%0Apu\n"
        },
        {
            "label": "2024-11-29_02-19-07",
            "content": "@@ -716,19 +716,16 @@\n ze(int s\n-ize\n )%7B%0A     \n@@ -1577,16 +1577,26 @@\n remove (\n+int valor \n )%7B%0A     \n@@ -2924,22 +2924,25 @@\n piseira \n-pencil\n+lapiseira\n ;%0Apublic\n@@ -3033,20 +3033,8 @@\n ert(\n-int length, \n doub\n@@ -3047,16 +3047,21 @@\n ckness, \n+std::\n string h\n@@ -3067,17 +3067,28 @@\n hardness\n- \n+, int length\n ) %7B%0A    \n@@ -3156,32 +3156,35 @@\n  length;%0A       \n+ //\n  pencil.insert(m\n@@ -3182,16 +3182,21 @@\n .insert(\n+std::\n make_sha\n@@ -3209,15 +3209,8 @@\n ad%3E(\n-length,\n thic\n@@ -3224,17 +3224,24 @@\n hardness\n- \n+, length\n ));%0A    \n@@ -3262,32 +3262,35 @@\n move() %7B%0A       \n+ //\n  pencil.remove()\n@@ -3328,16 +3328,19 @@\n %0A       \n+ //\n  pencil.\n@@ -3376,32 +3376,35 @@\n show() %7B%0A       \n+ //\n  fn::write(penci\n@@ -3405,24 +3405,19 @@\n (pencil.\n-toString\n+str\n ());%0A   \n"
        },
        {
            "label": "2024-11-29_02-19-43",
            "content": "@@ -255,16 +255,27 @@\n Grafite(\n+int size=0,\n double t\n@@ -306,36 +306,24 @@\n rdness= %22HB%22\n-, int size=0\n ) : size(siz\n@@ -1246,27 +1246,16 @@\n ptr)%7B%7D%0A%0A\n-    // bool\n %0A    boo\n@@ -1382,91 +1382,53 @@\n     \n-// bool%0A    bool insert(double thickness, string hardness, int siz\n+bool insert(Grafite* novoGrafit\n e)\n- \n %7B%0A    \n-%0A\n     if\n- \n (tip\n@@ -1439,17 +1439,16 @@\n nullptr)\n- \n %7B%0A      \n@@ -1441,32 +1441,36 @@\n llptr)%7B%0A        \n+    \n cout %3C%3C %22fail: j\n@@ -1504,127 +1504,8 @@\n     \n-    return false;%0A    %7D%0A%0A    if (this-%3Ethickness != thickness) %7B%0A        cout %3C%3C %22fail: calibre incompativel%22 %3C%3C endl;%0A\n     \n@@ -1530,136 +1530,18 @@\n     \n-%7D%0A%0A\n     \n-// ajuda do chat%0A    tip = new Grafite( thickness, hardness, size);%0A    cout %3C%3C %22Grafite inserido com sucesso.%22 %3C%3C endl;%0A\n+%7D%0A    \n     \n@@ -1563,32 +1563,8 @@\n   %7D%0A\n-    %0A    // lead %7C null%0A\n     \n@@ -1582,17 +1582,16 @@\n move ()%7B\n- \n %0A       \n@@ -1801,21 +1801,8 @@\n %0A   \n- %0A    // void\n %0A   \n@@ -1853,22 +1853,8 @@\n )) %7B\n- // se nao ha \n %0A   \n@@ -1877,38 +1877,34 @@\n  %22fail: nao \n-existe\n+ha\n  grafite\n %22 %3C%3C endl;%0A \n@@ -1883,32 +1883,46 @@\n : nao ha grafite\n+ na lapiseira.\n %22 %3C%3C endl;%0A     \n@@ -2030,17 +2030,16 @@\n nsumo) %7B\n- \n %0A       \n@@ -2058,23 +2058,23 @@\n  %22fail: \n-tamanho\n+grafite\n  insufic\n@@ -2079,16 +2079,39 @@\n iciente \n+para completar a folha.\n %22 %3C%3C end\n@@ -2271,30 +2271,22 @@\n %3C%3C %22\n-fail: f\n+F\n olha \n-in\n completa\n %22 %3C%3C\n@@ -2281,16 +2281,36 @@\n completa\n+! Grafite restante: \n %22 %3C%3C tip\n@@ -2965,87 +2965,44 @@\n ness\n-=0.3, string hardness=%22HB%22, int size=0) : pencil( thickness, hardness, size) %7B%7D\n+) %7B%0A        (void) thickness;%0A    %7D;\n %0A   \n@@ -3019,16 +3019,28 @@\n  insert(\n+int length, \n double t\n@@ -3068,19 +3068,8 @@\n ness\n-,int length\n  ) %7B\n@@ -3183,16 +3183,23 @@\n d%3CLead%3E(\n+length,\n thicknes\n@@ -3213,16 +3213,8 @@\n ness\n-, length\n  ));\n"
        },
        {
            "label": "2024-11-29_02-57-16",
            "content": "#include \"fn.hpp\"\n#include <iostream>\n\nusing namespace std;\n\nclass Grafite{\n// atributo size\nprivate:\n    int size; // tamanho grafite\n    double thickness; // espessura\n    string hardness; // dureza\npublic: \n// cria o construtor \n// inicializacao\n\n    Grafite(double thickness= 0.3, string hardness= \"HB\", int size=0) : size(size), thickness(thickness), hardness(hardness){}\n\nint usagePerSheet(){\n        if(hardness == \"HB\"){ return 1; \n        } else if(hardness == \"2B\"){ return 2;\n        } else if(hardness == \"4B\"){ return 3;\n        } else if(hardness == \"6B\"){ return 4;\n        }\n\n    }\n// chama o get pq size, thickness e hardness sao privado\n// chama o set \n\nint getSize(){\n    return size;\n}\nvoid setSize(int size){\n     this-> size = size;\n}\ndouble getThickness(){\n    return thickness;\n}\nstring getHardness(){\n    return hardness;\n}\nvoid setThickness(double thickness) {\n        this->thickness = thickness;\n    }\nvoid setHardness(string hardness) {\n        this->hardness = hardness;\n    }\nstring toString() {\n        return \"Grafite [Dureza: \" + hardness + \", Tamanho: \" + to_string(size) + \"mm]\";\n    }\n};\n\n\nclass Lapiseira{\nprivate:\n    Grafite* tip;\n    double thickness;\npublic:\n\n    // Construtor\n    Lapiseira() : tip(nullptr){}\n\n    // bool\n    bool hasGrafite(){\n        return tip != nullptr; // verificar se ha grafite\n    }\n    \n    // implementar o metodo insert\n    // bool\n    bool insert(double thickness, string hardness, int size) {\n    \n    if (tip != nullptr) {\n        cout << \"fail: ja existe grafite\" << endl;\n        return false;\n    }\n\n    if (this->thickness != thickness) {\n        cout << \"fail: calibre incompativel\" << endl;\n        return false;\n    }\n\n    // ajuda do chat\n    tip = new Grafite( thickness, hardness, size);\n    cout << \"Grafite inserido com sucesso.\" << endl;\n    return true;\n    }\n    \n    // lead | null\n    Grafite* remove (){ \n        if (tip == nullptr){\n            cout << \"fail: nao existe grafite\" << endl;\n            return nullptr;\n        }\n        Grafite* remove = tip; \n        tip = nullptr;\n        return remove;\n        }\n    \n    // void\n    void writePage() {\n        if (!hasGrafite()) { // se nao ha \n            cout << \"fail: nao existe grafite\" << endl;\n            return;\n        }\n\n        int consumo = tip->usagePerSheet();\n        if (tip->getSize() < consumo) { \n            cout << \"fail: tamanho insuficiente \" << endl;\n            tip->setSize(0); // Consome todo o grafite restante\n        } else {\n            tip->setSize(tip->getSize() - consumo);\n            cout << \"fail: folha incompleta\" << tip->getSize() << \"mm.\" << endl;\n        }\n    }\n\n    // Mostra o estado atual da lapiseira\n    string toString() const {\n        if (hasGrafite()) {\n            return \"Lapiseira com \" + tip->toString();\n        } else {\n            return \"Lapiseira sem grafite.\";\n        }\n    }\n};\n   \n    \n\n    // - Parte 2: Remover Grafite\n    // Implemente o m\u00e9todo `remove` que retira o grafite da lapiseira, se houver.\n    // Verifique se o grafite foi removido corretamente.\n   // Verifique se o m\u00e9todo `remove` retorna o grafite removido ou `null` se n\u00e3o havia grafite.\n    \n\n\nclass Adapter {\nprivate:\n    Lapiseira pencil;\npublic:\n    Adapter(double thickness=0.3, string hardness=\"HB\", int size=0) : pencil( thickness, hardness, size) {}\n    \n    void insert(double thickness, string hardness,int length ) {\n        (void) thickness;\n        (void) hardness;\n        (void) length;\n        pencil.insert(make_shared<Lead>(thickness, hardness, length ));\n    }\n\n    void remove() {\n        pencil.remove();\n    }\n\n    void writePage() {\n        pencil.writePage();\n    }\n\n    void show() {\n        fn::write(pencil.toString());\n    }\n};\n\n\nint main() {\n    Adapter adp(0);\n\n    while (true) {\n        fn::write(\"$\", \"\");\n        auto line = fn::input();\n        auto args = fn::split(line);\n        fn::write(line);\n\n        if      (args[0] == \"show\"  ) { adp.show();                                    }\n        else if (args[0] == \"init\"  ) { adp = Adapter(+args[1]);                       }\n        else if (args[0] == \"insert\") { adp.insert(+args[1], args[2], (int) +args[3]); }\n        else if (args[0] == \"remove\") { adp.remove();                                  }\n        else if (args[0] == \"write\" ) { adp.writePage();                               }\n        else if (args[0] == \"end\"   ) { break;                                         }\n        else                          { fn::write(\"fail: comando invalido\");           }\n    }\n}\n"
        }
    ]
}